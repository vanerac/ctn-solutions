/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * NestJS API
 * desc
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  User,
  CreateUserDto,
  RegisterDTO,
  LoginDTO,
} from "../core.schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const appControllerGetHello = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/`, options);
};

export const getAppControllerGetHelloKey = () => [`/`];

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = AxiosError<unknown>;

export const useAppControllerGetHello = <
  TError = AxiosError<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAppControllerGetHelloKey() : null));
  const swrFn = () => appControllerGetHello(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerCreate = (
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`/user`, createUserDto, options);
};

export const userControllerFindAll = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/user`, options);
};

export const getUserControllerFindAllKey = () => [`/user`];

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = AxiosError<User>;

export const useUserControllerFindAll = <TError = AxiosError<User>>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindAllKey() : null));
  const swrFn = () => userControllerFindAll(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerFindOne = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/user/${id}`, options);
};

export const getUserControllerFindOneKey = (id: number) => [`/user/${id}`];

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = AxiosError<User>;

export const useUserControllerFindOne = <TError = AxiosError<User>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof userControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  }
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindOneKey(id) : null));
  const swrFn = () => userControllerFindOne(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerUpdate = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.patch(`/user/${id}`, undefined, options);
};

export const userControllerRemove = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`/user/${id}`, options);
};

export const authControllerRegister = (
  registerDTO: RegisterDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/register`, registerDTO, options);
};

export const authControllerLogin = (
  loginDTO: LoginDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/login`, loginDTO, options);
};

export const authControllerProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/auth/profile`, options);
};

export const getAuthControllerProfileKey = () => [`/auth/profile`];

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = AxiosError<unknown>;

export const useAuthControllerProfile = <
  TError = AxiosError<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAuthControllerProfileKey() : null));
  const swrFn = () => authControllerProfile(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
