/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * NestJS API
 * desc
 * OpenAPI spec version: 1.0
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  User,
  CreateUserDto,
  RegisterDTO,
  LoginDTO,
} from "./core.schemas";
import { customInstance } from "./custom-instance";
import type { ErrorType, BodyType } from "./custom-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/`, method: "get" }, options);
};

export const getAppControllerGetHelloKey = () => [`/`];

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export const useAppControllerGetHello = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAppControllerGetHelloKey() : null));
  const swrFn = () => appControllerGetHello(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerCreate = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/user`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options
  );
};

export const userControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>({ url: `/user`, method: "get" }, options);
};

export const getUserControllerFindAllKey = () => [`/user`];

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = ErrorType<User>;

export const useUserControllerFindAll = <TError = ErrorType<User>>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindAllKey() : null));
  const swrFn = () => userControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/user/${id}`, method: "get" },
    options
  );
};

export const getUserControllerFindOneKey = (id: number) => [`/user/${id}`];

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = ErrorType<User>;

export const useUserControllerFindOne = <TError = ErrorType<User>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof userControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindOneKey(id) : null));
  const swrFn = () => userControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerUpdate = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/user/${id}`, method: "patch" },
    options
  );
};

export const userControllerRemove = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/user/${id}`, method: "delete" },
    options
  );
};

export const authControllerRegister = (
  registerDTO: BodyType<RegisterDTO>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/auth/register`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: registerDTO,
    },
    options
  );
};

export const authControllerLogin = (
  loginDTO: BodyType<LoginDTO>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/auth/login`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: loginDTO,
    },
    options
  );
};

export const authControllerProfile = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/auth/profile`, method: "get" }, options);
};

export const getAuthControllerProfileKey = () => [`/auth/profile`];

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = ErrorType<unknown>;

export const useAuthControllerProfile = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAuthControllerProfileKey() : null));
  const swrFn = () => authControllerProfile(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
