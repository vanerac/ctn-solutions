/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * NestJS API
 * desc
 * OpenAPI spec version: 1.0
 */
import useSwr from "swr";
import type { SWRConfiguration, Key } from "swr";
import type {
  User,
  CreateUserDto,
  UpdateUserDto,
  RegisterDTO,
  LoginResponse,
  LoginDTO,
  ChangePasswordDTO,
  Estimate,
  CreateEstimateDto,
  UpdateEstimateDto,
  Company,
  CreateCompanyDto,
  UpdateCompanyDto,
  Customer,
  CreateCustomerDto,
  UpdateCustomerDto,
  Invoice,
  CreateInvoiceDto,
  UpdateInvoiceDto,
  Export,
  Document,
} from "./core.schemas";
import { customInstance } from "./custom-instance";
import type { ErrorType, BodyType } from "./custom-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/`, method: "get" }, options);
};

export const getAppControllerGetHelloKey = () => [`/`];

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export const useAppControllerGetHello = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAppControllerGetHelloKey() : null));
  const swrFn = () => appControllerGetHello(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerCreate = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/user`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options
  );
};

export const userControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>({ url: `/user`, method: "get" }, options);
};

export const getUserControllerFindAllKey = () => [`/user`];

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = ErrorType<User[]>;

export const useUserControllerFindAll = <TError = ErrorType<User[]>>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindAllKey() : null));
  const swrFn = () => userControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/user/${id}`, method: "get" },
    options
  );
};

export const getUserControllerFindOneKey = (id: number) => [`/user/${id}`];

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = ErrorType<User>;

export const useUserControllerFindOne = <TError = ErrorType<User>>(
  id: number,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof userControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUserControllerFindOneKey(id) : null));
  const swrFn = () => userControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const userControllerUpdate = (
  id: number,
  updateUserDto: BodyType<UpdateUserDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/user/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options
  );
};

export const userControllerRemove = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/user/${id}`, method: "delete" },
    options
  );
};

export const authControllerRegister = (
  registerDTO: BodyType<RegisterDTO>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/auth/register`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: registerDTO,
    },
    options
  );
};

export const authControllerLogin = (
  loginDTO: BodyType<LoginDTO>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LoginResponse>(
    {
      url: `/auth/login`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: loginDTO,
    },
    options
  );
};

export const authControllerProfile = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/auth/profile`, method: "get" }, options);
};

export const getAuthControllerProfileKey = () => [`/auth/profile`];

export type AuthControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProfile>>
>;
export type AuthControllerProfileQueryError = ErrorType<unknown>;

export const useAuthControllerProfile = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof authControllerProfile>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getAuthControllerProfileKey() : null));
  const swrFn = () => authControllerProfile(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const authControllerChangePassword = (
  changePasswordDTO: BodyType<ChangePasswordDTO>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/auth/change-password`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: changePasswordDTO,
    },
    options
  );
};

export const estimateControllerCreate = (
  createEstimateDto: BodyType<CreateEstimateDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Estimate>(
    {
      url: `/estimate`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createEstimateDto,
    },
    options
  );
};

export const estimateControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Estimate[]>(
    { url: `/estimate`, method: "get" },
    options
  );
};

export const getEstimateControllerFindAllKey = () => [`/estimate`];

export type EstimateControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof estimateControllerFindAll>>
>;
export type EstimateControllerFindAllQueryError = ErrorType<unknown>;

export const useEstimateControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof estimateControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getEstimateControllerFindAllKey() : null));
  const swrFn = () => estimateControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const estimateControllerRemoveBulk = (
  estimateControllerRemoveBulkBody: string[],
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/estimate`,
      method: "delete",
      headers: { "Content-Type": "application/json" },
      data: estimateControllerRemoveBulkBody,
    },
    options
  );
};

export const estimateControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Estimate>(
    { url: `/estimate/${id}`, method: "get" },
    options
  );
};

export const getEstimateControllerFindOneKey = (id: string) => [
  `/estimate/${id}`,
];

export type EstimateControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof estimateControllerFindOne>>
>;
export type EstimateControllerFindOneQueryError = ErrorType<unknown>;

export const useEstimateControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof estimateControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getEstimateControllerFindOneKey(id) : null));
  const swrFn = () => estimateControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const estimateControllerUpdate = (
  id: string,
  updateEstimateDto: BodyType<UpdateEstimateDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Estimate>(
    {
      url: `/estimate/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateEstimateDto,
    },
    options
  );
};

export const estimateControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/estimate/${id}`, method: "delete" },
    options
  );
};

export const companyControllerCreate = (
  createCompanyDto: BodyType<CreateCompanyDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Company>(
    {
      url: `/company`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createCompanyDto,
    },
    options
  );
};

export const companyControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Company[]>({ url: `/company`, method: "get" }, options);
};

export const getCompanyControllerFindAllKey = () => [`/company`];

export type CompanyControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindAll>>
>;
export type CompanyControllerFindAllQueryError = ErrorType<unknown>;

export const useCompanyControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof companyControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCompanyControllerFindAllKey() : null));
  const swrFn = () => companyControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const companyControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Company>(
    { url: `/company/${id}`, method: "get" },
    options
  );
};

export const getCompanyControllerFindOneKey = (id: string) => [
  `/company/${id}`,
];

export type CompanyControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindOne>>
>;
export type CompanyControllerFindOneQueryError = ErrorType<unknown>;

export const useCompanyControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof companyControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCompanyControllerFindOneKey(id) : null));
  const swrFn = () => companyControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const companyControllerUpdate = (
  id: string,
  updateCompanyDto: BodyType<UpdateCompanyDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Company>(
    {
      url: `/company/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateCompanyDto,
    },
    options
  );
};

export const companyControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/company/${id}`, method: "delete" },
    options
  );
};

export const customerControllerCreate = (
  createCustomerDto: BodyType<CreateCustomerDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Customer>(
    {
      url: `/customer`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createCustomerDto,
    },
    options
  );
};

export const customerControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Customer[]>(
    { url: `/customer`, method: "get" },
    options
  );
};

export const getCustomerControllerFindAllKey = () => [`/customer`];

export type CustomerControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerControllerFindAll>>
>;
export type CustomerControllerFindAllQueryError = ErrorType<unknown>;

export const useCustomerControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof customerControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCustomerControllerFindAllKey() : null));
  const swrFn = () => customerControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const customerControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Customer>(
    { url: `/customer/${id}`, method: "get" },
    options
  );
};

export const getCustomerControllerFindOneKey = (id: string) => [
  `/customer/${id}`,
];

export type CustomerControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerControllerFindOne>>
>;
export type CustomerControllerFindOneQueryError = ErrorType<unknown>;

export const useCustomerControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof customerControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCustomerControllerFindOneKey(id) : null));
  const swrFn = () => customerControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const customerControllerUpdate = (
  id: string,
  updateCustomerDto: BodyType<UpdateCustomerDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Customer>(
    {
      url: `/customer/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateCustomerDto,
    },
    options
  );
};

export const customerControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/customer/${id}`, method: "delete" },
    options
  );
};

export const invoiceControllerCreate = (
  createInvoiceDto: BodyType<CreateInvoiceDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Invoice>(
    {
      url: `/invoice`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createInvoiceDto,
    },
    options
  );
};

export const invoiceControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Invoice[]>({ url: `/invoice`, method: "get" }, options);
};

export const getInvoiceControllerFindAllKey = () => [`/invoice`];

export type InvoiceControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerFindAll>>
>;
export type InvoiceControllerFindAllQueryError = ErrorType<unknown>;

export const useInvoiceControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof invoiceControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getInvoiceControllerFindAllKey() : null));
  const swrFn = () => invoiceControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const invoiceControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Invoice>(
    { url: `/invoice/${id}`, method: "get" },
    options
  );
};

export const getInvoiceControllerFindOneKey = (id: string) => [
  `/invoice/${id}`,
];

export type InvoiceControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof invoiceControllerFindOne>>
>;
export type InvoiceControllerFindOneQueryError = ErrorType<unknown>;

export const useInvoiceControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof invoiceControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getInvoiceControllerFindOneKey(id) : null));
  const swrFn = () => invoiceControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const invoiceControllerUpdate = (
  id: string,
  updateInvoiceDto: BodyType<UpdateInvoiceDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Invoice>(
    {
      url: `/invoice/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateInvoiceDto,
    },
    options
  );
};

export const invoiceControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/invoice/${id}`, method: "delete" },
    options
  );
};

export const exportControllerCreate = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Export>(
    { url: `/export/test`, method: "post" },
    options
  );
};

export const exportControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Export[]>({ url: `/export`, method: "get" }, options);
};

export const getExportControllerFindAllKey = () => [`/export`];

export type ExportControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof exportControllerFindAll>>
>;
export type ExportControllerFindAllQueryError = ErrorType<unknown>;

export const useExportControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof exportControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getExportControllerFindAllKey() : null));
  const swrFn = () => exportControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const exportControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Export>(
    { url: `/export/${id}`, method: "get" },
    options
  );
};

export const getExportControllerFindOneKey = (id: string) => [`/export/${id}`];

export type ExportControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof exportControllerFindOne>>
>;
export type ExportControllerFindOneQueryError = ErrorType<unknown>;

export const useExportControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof exportControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getExportControllerFindOneKey(id) : null));
  const swrFn = () => exportControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const exportControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/export/${id}`, method: "delete" },
    options
  );
};

export const documentControllerCreate = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Document>(
    { url: `/document/upload`, method: "post" },
    options
  );
};

export const documentControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Document[]>(
    { url: `/document`, method: "get" },
    options
  );
};

export const getDocumentControllerFindAllKey = () => [`/document`];

export type DocumentControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerFindAll>>
>;
export type DocumentControllerFindAllQueryError = ErrorType<unknown>;

export const useDocumentControllerFindAll = <
  TError = ErrorType<unknown>
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof documentControllerFindAll>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getDocumentControllerFindAllKey() : null));
  const swrFn = () => documentControllerFindAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const documentControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Document>(
    { url: `/document/${id}`, method: "get" },
    options
  );
};

export const getDocumentControllerFindOneKey = (id: string) => [
  `/document/${id}`,
];

export type DocumentControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof documentControllerFindOne>>
>;
export type DocumentControllerFindOneQueryError = ErrorType<unknown>;

export const useDocumentControllerFindOne = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof documentControllerFindOne>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getDocumentControllerFindOneKey(id) : null));
  const swrFn = () => documentControllerFindOne(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const documentControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/document/${id}`, method: "delete" },
    options
  );
};
